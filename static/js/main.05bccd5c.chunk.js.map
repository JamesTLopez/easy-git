{"version":3,"sources":["context.tsx","components/layouts/notify.tsx","components/layouts/navbar.tsx","components/layouts/footerNav.tsx","components/pages/Search.tsx","components/layouts/card.tsx","components/pages/Profile.tsx","components/pages/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["reducer","state","action","type","userLogin","payload","userInfo","userRepos","initState","UserProvider","createContext","Notify","className","Navbar","useState","login","setLogin","dispatch","useContext","isFound","found","updateFound","history","useHistory","submitForm","e","fetch","then","res","ok","json","Error","data","repos_url","repos","push","catch","error","setTimeout","console","log","preventDefault","to","onSubmit","onChange","target","value","placeholder","footerNav","Search","onNotFound","Card","id","name","owner_url","html_url","owner_name","href","key","src","alt","Profile","UserData","UserRepo","avatar_url","company","location","hirable","email","followers","following","length","map","repo","owner","About","App","useReducer","Provider","exact","path","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.05bccd5c.chunk.js","sourcesContent":["import {createContext} from 'react'\n\nexport interface User {\n\n    login?:boolean;\n    id?:number;\n    node_id?:string;\n    avatar_url?:string;\n    url?:string;\n    html_url?:string;\n    followers_url?:string;\n    following_url?:string;\n    gists_url?:string;\n    starred_url?:string;\n    subscriptions_url?:string;\n    organizations_url?:string;\n    repos_url?:string;\n    events_url?:string;\n    received_events_url?:string;\n    type?:string;\n    site_admin?:boolean;\n    name?:string;\n    company?:string;\n    blog?:string;\n    location?:string;\n    email?:string;\n    hireable?:string;\n    bio?:string;\n    twitter_username?:string;\n    public_repos?:number;\n    public_gists?:number;\n    followers?:number;\n    following?:number;\n    created_at?:string;\n    updated_at?:string;\n}\n\n\ninterface Iaction{\n    type:string;\n    payload:any;\n}\n\nexport interface userState {\n    userLogin?:string;\n    userInfo?:User;\n    userRepos?:[]\n \n\n}\n\nexport const reducer = (state:userState,action:Iaction):userState =>{\n    switch(action.type){\n        case'UPDATE_NAME':\n            return{\n                ...state,\n                userLogin:action.payload\n            }\n           \n        case'UPDATE_INFO':\n            return{\n                ...state,\n                userInfo:action.payload\n            }\n        case'UPDATE_REPOS':\n          \n            return{\n                ...state,\n                userRepos:action.payload\n            }\n        default:\n            return state\n    }\n  \n}\n\n\nexport const initState:userState = {\n    userLogin:\"\",\n    userInfo:{},\n    userRepos:[]\n}\n\n\nconst UserProvider = createContext<userState|any>(initState);\nexport default UserProvider;\n","import React from \"react\";\n\nexport interface notify{\n    isFound:boolean;\n  }\n\n\nfunction Notify() {\n  return (\n    <div className=\"notify\">\n      <div className=\"notify-container\">\n        <p>User does not exist</p>\n      </div>\n    </div>\n  );\n}\n\nexport default Notify;\n","import React, { useState, useContext } from \"react\";\nimport { Link ,useHistory} from \"react-router-dom\";\nimport { Isearch } from \"../pages/Search\"\nimport UserProvider from \"../../context\"\nimport Notify,{notify} from '../layouts/notify'\n\n\n\nconst Navbar: React.FC = () => {\n  const [login, setLogin] = useState<Isearch>({ login: '' });\n  const { dispatch } = useContext(UserProvider);\n  let [found,updateFound] = useState<notify>({isFound:false});\n  const history = useHistory();\n\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLogin({ login: e.target.value });\n\n  }\n\n  const onNotFound = () => {\n    updateFound({isFound:true})\n    setTimeout( () => {\n      updateFound({isFound:false})\n    }, 3000);\n    \n  }\n\n  const submitForm = (e: any) => {\n    \n    fetch(`https://api.github.com/users/${login.login}`)\n      .then(res => {\n        if (res.ok) {\n          dispatch({ type: 'UPDATE_NAME', payload: login.login });\n          return res.json()\n        } else {\n          throw new Error('Not Found');\n        }\n      })\n      .then(data => {\n        dispatch({ type: 'UPDATE_INFO', payload: data });\n        fetch(data.repos_url)\n          .then(res => {return res.json()})\n          .then(repos =>{\n            dispatch({ type: 'UPDATE_REPOS', payload: repos });\n          })\n        history.push(\"/profile\")\n      }).catch((error) => {\n        onNotFound()\n        console.log(error)\n      })\n    e.preventDefault();\n\n  }\n\n  return (\n    <header className=\"navbar-container\">\n      <div className=\"navbar-content\">\n        <div className=\"logo\">\n          <Link to=\"/easy-git\"><h1>Easy-Git</h1></Link>\n        </div>\n        <div className=\"nav-area\">\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/about\">About</Link>\n              </li>\n              <li>\n                <div className=\"search-form\">\n                  <form onSubmit={(e) => submitForm(e)}>\n                    <input type=\"text\" onChange={handleChange} placeholder=\"Search..\" />\n                    <button type=\"submit\">Search</button>\n                    {found.isFound ? <Notify/> : null}\n                  </form>\n                </div>\n              </li>       \n            </ul>\n          </nav>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Navbar;\n","import React from 'react'\n\nconst footerNav: React.FC = () => {\n    return (\n        <footer className=\"footer-container\">\n            <div className=\"footer-content\">\n                <div className=\"copyright\">\n                    <p>\n                        Copyright\n                    </p>\n                </div>\n            </div>\n        </footer>\n    )\n}\n\nexport default footerNav\n","import React, { useContext, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport UserProvider from '../../context'\nimport Notify,{notify} from '../layouts/notify'\n\nexport interface Isearch {\n  login?: string;\n}\n\n\n\nconst Search: React.FC = () => {\n\n  const history = useHistory();\n  const [login, setLogin] = useState<Isearch>({ login: '' });\n  let [found,updateFound] = useState<notify>({isFound:false});\n  const { dispatch } = useContext(UserProvider);\n\n\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setLogin({ login: e.target.value });\n  }\n\n  const submitForm = (e: any) => {\n    fetch(`https://api.github.com/users/${login.login}`)\n      .then(res => {\n        if (res.ok) {\n          dispatch({ type: 'UPDATE_NAME', payload: login.login });\n          return res.json()\n        } else {\n          throw new Error('Not Found');\n        }\n      })\n      .then(data => {\n        dispatch({ type: 'UPDATE_INFO', payload: data });\n        fetch(data.repos_url)\n          .then(res => {return res.json()})\n          .then(repos =>{\n            dispatch({ type: 'UPDATE_REPOS', payload: repos });\n          })\n        history.push(\"/profile\")\n      }).catch((error) => {\n        onNotFound()\n        console.log(error)\n      })\n    e.preventDefault();\n\n  }\n\n  const onNotFound = () => {\n    updateFound({isFound:true})\n    setTimeout( () => {\n      updateFound({isFound:false})\n    }, 3000);\n    \n  }\n\n  return (\n    <div className=\"search-container\" >\n        \n      <div className=\"search-content\">\n        <div className=\"area\">\n          <div className=\"title\">\n            <div className=\"logo\">\n              <p>EASY-GIT</p>\n            </div>\n            <div className=\"description\">\n              <p>Displays users repository with easy visibility</p>\n            </div>\n          </div>\n          <div className=\"search-form\">\n            <form onSubmit={(e) => submitForm(e)}>\n              <input type=\"text\" onChange={handleChange} placeholder=\"Search..\" />\n              <button type=\"submit\">Search</button>\n              {found.isFound ? <Notify/> : null}\n            </form>\n\n\n          </div>\n        </div>\n      </div>\n    \n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\n\ninterface Props {\n  id: any;\n  name: string;\n  owner_url: string;\n  html_url: string;\n  owner_name: string;\n}\n\nconst Card: React.FC<Props> = ({\n  id,\n  name,\n  owner_url,\n  html_url,\n  owner_name,\n}) => {\n  return (\n    <div className=\"container-card\">\n      <a href={html_url} target=\"_blank\">\n        <div key={id} className=\"card\">\n          <div className=\"card-container\">\n            <div className=\"image-area\">\n              <img src={owner_url} alt=\"Owner Url\"></img>\n            </div>\n            <div className=\"info-area\">\n              <label>{name}</label>\n              <label>{owner_name}</label>\n            </div>\n          </div>\n        </div>\n      </a>\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useContext } from 'react'\n\nimport UserProvider from \"../../context\"\nimport Card from \"../layouts/card\"\n\n\n\nconst Profile: React.FC = () => {\n    const { state } = useContext(UserProvider);\n    const UserData = state.userInfo;\n    const UserRepo = state.userRepos;\n\n    return (\n        <div className=\"profile-container\">\n            <div className=\"profile-content\">\n                <div className=\"profile-title\">\n                    <div className=\"user-picture\">\n                        <img src={UserData.avatar_url} alt=\"Alt\"></img>\n                        <p>{UserData.name}</p>\n                    </div>\n                    <div className=\"user-info\">\n                        <div className=\"list\">\n                            <div className=\"row-1\">\n                                <div className=\"item\">\n                                    <label>Login: </label>\n                                    <p>{UserData.login}</p>\n                                </div>\n                                <div className=\"item\">\n                                    <label>Name: </label>\n                                    <p>{UserData.name ? UserData.name : 'N/A'}</p>\n                                </div>\n                                <div className=\"item\">\n                                    <label>Company: </label>\n                                    <p>{UserData.company ? UserData.company : 'N/A'}</p>\n                                </div>\n                                <div className=\"item\">\n                                    <label>Location: </label>\n                                    <p>{UserData.location ? UserData.location : 'N/A'}</p>\n                                </div>\n                            </div>\n                            <div className=\"row-2\">\n                                <div className=\"item\">\n                                    <label>Hirable: </label>\n                                    <p>{UserData.hirable ? UserData.hirable : 'N/A'}</p>\n                                </div>\n                                <div className=\"item\">\n                                    <label>Email: </label>\n                                    <p>{UserData.email ? UserData.email : 'N/A'}</p>\n                                </div>\n                                <div className=\"item\">\n                                    <label>Followers: </label>\n                                    <p>{UserData.followers ? UserData.followers : 'N/A'}</p>\n                                </div>\n                                <div className=\"item\">\n                                    <label>Following: </label>\n                                    <p>{UserData.following ? UserData.following : 'N/A'}</p>\n                                </div>\n\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"profile-repos\">\n                    <div className=\"repository-list\">\n                        {(UserRepo.length !== 0) ? (UserRepo.map((repo:any) => (\n                            // <h3 key={repo.id}>{repo.name}</h3>\n                            <Card key={repo.id} id={repo.id} name={repo.name} owner_url={repo.owner.avatar_url} html_url={repo.html_url} owner_name={repo.owner.login}/>\n                        ))) : <h2>No repository to be displayed</h2>}\n\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Profile\n","import React from \"react\";\n\nconst About: React.FC = () => {\n  return (\n    <div className=\"about-container\">\n      <div className=\"about-content\">\n        <div className=\"title\">\n          <p>About</p>\n        </div>\n        <div className=\"content\">\n          <div className=\"description\">\n            <p>\n              A simple react typescript app that searches and displays a users\n              github repos and information.\n            </p>\n          </div>\n          <div className=\"sub-title\">\n       \n            <div className=\"tech\">\n            <p>Technologies</p>\n                <ul>\n                    <li>Typescript</li>\n                    <li>Scss</li>\n                    <li>Github API</li>\n                    <li>React</li>\n                </ul>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React,{useReducer} from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Nav from \"./components/layouts/navbar\";\nimport Footer from \"./components/layouts/footerNav\";\nimport Search from \"./components/pages/Search\";\nimport Profile from \"./components/pages/Profile\";\nimport About from \"./components/pages/About\"\n\nimport \"./App.css\";\n\nimport UserProvider,{initState,reducer} from \"./context\";\n\n\n\nconst App: React.FC = () => {\n\n  const [state,dispatch] = useReducer(reducer,initState);\n\n  return (\n    <UserProvider.Provider value={{state,dispatch}}>\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <Switch>\n            <Route exact path={`/easy-git`}>\n              <Search/>\n            </Route>\n            <Route path={`/profile`}>\n              <Profile />\n            </Route>\n            <Route path={`/about`}>\n              <About />\n            </Route>\n          </Switch>\n          <Footer />\n        </div>\n      </Router>\n    </UserProvider.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}